<?xml version="1.0" encoding="UTF-8" ?>
<Module>
    <!-- /*
 * Copyright (c) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */ -->
  <ModulePrefs title="Tele NP App">
    <Require feature="rpc"/>
  </ModulePrefs>
  <Content type="html"><![CDATA[
<!DOCTYPE html>
<!-- The hangout API JavaScript. Always include this first -->
<script src="//hangoutsapi.talkgadget.google.com/hangouts/api/hangout.js?v=1.3"></script>

<!-- The JavaScript for this app. This must always be a full URL not a
     relative path.
     Tip: You can load it from a local web server such as
     http://localhost/app.js for faster single user development -->

<script type="text/javascript" src="//awesometelenp.appspot.com/static/eventemitter2.min.js"></script>
<script type="text/javascript" src="//awesometelenp.appspot.com/static/roslib.min.js"></script>

<!-- script type="text/javascript" src="http://cdn.robotwebtools.org/EventEmitter2/0.4.11/eventemitter2.js"></script -->
<!-- script type="text/javascript" src="https://github.com/RobotWebTools/roslibjs/blob/devel/build/roslib.js"></script -->
<script type="text/javascript"><!-- /script -->

/*

*/

var mod_base = 512;
var basename = "telenp";
var test_config = false;
var tx_number = 0;
var tx_operation = "";
var tx_gapi_key = "telenp"; // used by transmitting (user) node
var tx_gapi_error = "telenp_error"; // used by turtlebot node
var tx_gapi_controller_name = "telenp_controller";
var tx_gapi_turtlebot_name = "telenp_turtlebot";
var tx_gapi_list = "telenp_list";
var rx_data = "";
var rx_error = "";
var rx_error_obj = null;
var rx_obj = null;
var rx_data_old = "";
var rx_error_old = "";
var control_retransmit = false;
var control_msgtype = 0;
var control_msgtype_rx = 0;
var control_stream = false;
var control_stream_rx = false;
var control_obstructed = false;
var control_obstructed_string = "";
var control_obstructed_num = 0;
var control_connected_motors = false;
var control_connected_rx = false;
var control_stopped = false;
var control_stopped_rx = false;
var connection = new Object();
var cmdVel = new Object();

var stream_num = 0;
var timer_key = 0;
var timer_up = 0;
var timer_down = 0;
var timer_left = 0;
var timer_right = 0;

var last_key = "stop";
var last_counter = 1;
var speed_max = 3;
var seq_ros = 0;

var MSG_STRING = 1;
var MSG_TWIST = 2;
var MSG_RESERVED = 3;

var ros;
var cmdVel;
var cmdVel2;
var cmdVel3;
var kinect_listener;

var choose_output_string = "for ROS String ouput...<br><br>" +
            "TURTLEBOT SETUP: <br>" +
			"in separate turtlebot terminals...<br>" +
			" (this is for the 'rostopic echo' method.)<br><br>" + 
			"<i style='color:blue;font-size:10pt;font-family:courier'>" +
			"$ roslaunch rosbridge_server rosbridge_websocket.launch <br>" +
			"$ rostopic echo /talker <br><br>" +
			"</i>... then look at terminal for output when" +
			" arrow buttons are clicked";
var choose_output_twist = "for ROS Twist output... <br><br>" +
            "TURTLEBOT SETUP: <br>" +
			"in separate turtlebot terminals...<br><br>" +
			"<i style='color:blue;font-size:10pt;font-family:courier'>" +
			"$ roslaunch rosbridge_server rosbridge_websocket.launch <br>" +
			"$ roslaunch turtlebot_bringup minimal.launch <br><br>" +
			"</i>... then direct the turtlebot from the Google Hangout screen.";
var choose_output_reserved = "this option is RESERVED for future development. <br><br>" +
            "TURTLEBOT SETUP: <br>" +
			"after installing tele-np ros packages...<br><br>" +
			"<i style='color:blue;font-size:10pt;font-family:courier'>" +
			"$ roslaunch tele_presence full.launch <br><br>" +
			"</i>... then direct the turtlebot from the Google Hangout screen.";
var choose_click =      "click the arrows to direct the turtlebot.";
var choose_stream = "for communication with ROS, <br>" +
            "\"Stream Mode\" clicked <br><br>" +    
            "Click to disable - on the turtlebot computer - precautions that prevent " +
			"more than one remote computer from giving instructions at the same time.";
var choose_turtlebot = "for communication with ROS, <br>" +
            "\"Turtlebot Node\" clicked <br><br>" + 
            "Click this option to tell the " +
			"system that this is the node that <i><u>this</u></i> is the node that hosts the " +
			 " actual turtlebot hardware.";
var button_center_start = '<img ' + //'src="bitmap/button_center.png"' +
			' src="//awesometelenp.appspot.com/static/bitmap/button_center.png"' +  
			' onmousedown="tryStopClick()" alt="CLICK" >';
var button_center_error = '<img ' + //'src="bitmap/button_err.png"' + 
			' src="//awesometelenp.appspot.com/static/bitmap/button_err.png"' +  
			' onmousedown="tryStopClick()" alt="ERROR" >';
var button_center_src_start = "//awesometelenp.appspot.com/static/bitmap/button_center.png";
var button_center_src_error = "//awesometelenp.appspot.com/static/bitmap/button_err.png";
var button_test_start = "static/bitmap/button_center.png";
var button_test_error = "bitmap/button_err.png";

var tab_controls_src_selected = "//awesometelenp.appspot.com/static/bitmap/tab_controls.png";
var tab_controls_src_unselected = "//awesometelenp.appspot.com/static/bitmap/tab_controls_unselected.png";
var tab_text_src_selected = "//awesometelenp.appspot.com/static/bitmap/tab_setup.png";
var tab_text_src_unselected = "//awesometelenp.appspot.com/static/bitmap/tab_setup_unselected.png";
var tab_map_src_selected = "//awesometelenp.appspot.com/static/bitmap/tab_map.png";
var tab_map_src_unselected = "//awesometelenp.appspot.com/static/bitmap/tab_map_unselected.png";


function tryLeftClick() {
	formJSONClick("left");
	if (!control_retransmit) changeHintText(choose_click); 
	if (timer_left == 0) timer_left = setInterval('formJSONClick("left")', 500);
}

function tryRightClick() {
	formJSONClick("right");
	if (!control_retransmit) changeHintText(choose_click); 
	if (timer_right == 0) timer_right = setInterval('formJSONClick("right")', 500);
}

function tryUpClick() {
	formJSONClick("up");
	if (!control_retransmit) changeHintText(choose_click); 
	if (timer_up == 0) timer_up = setInterval('formJSONClick("up")', 500);
}

function tryDownClick() {
	formJSONClick("down");
	if (!control_retransmit) changeHintText(choose_click); 
	if (timer_down == 0) timer_down = setInterval('formJSONClick("down")', 500);
}

function tryStopClick() {
	tx_number = - 1;
	stream_num = 0;
	formJSONClick("stop");
	control_stopped = false;
	control_stopped_rx = false;
	changeAlertText();
	if (!control_retransmit) changeHintText(choose_click);
	changeButtonSrc(button_center_src_start); 
	formJSONError();
}

function tryClearTimer() {
	if (timer_up != 0) {
		clearInterval(timer_up);
		timer_up = 0;
	}
	if (timer_down != 0) {
		clearInterval(timer_down);
		timer_down = 0;
	}
	if (timer_left != 0) {
		clearInterval(timer_left);
		left_left = 0;
	}
	if (timer_right != 0) {
		clearInterval(timer_right);
		timer_right = 0;
	}
}

function tryTurtlebotClick() {
	
	if (document.getElementById("setTurtlebot").checked && !control_connected_motors &&
	        isUnsetName(tx_gapi_turtlebot_name) ) { 
	    formJSONTurtlebotName();
		control_retransmit = true;
		control_msgtype = 2;
		control_connected_motors = true;
		control_connected_rx = true;
		changeHintText(choose_turtlebot);
		changeAlertText();
		document.getElementById("messageTwist").checked = true;
		trySetupROS();
		formJSONError();
	}
	else if (control_connected_motors && isMatchingName(tx_gapi_turtlebot_name) ) {
	    gapi.hangout.data.clearValue(tx_gapi_turtlebot_name);
		document.getElementById("setStream").checked = false;
		control_connected_motors = false;
		control_connected_rx = false;
		if (control_retransmit) formJSONError();
		control_retransmit = false;
		changeAlertText();
	}
	console.log(control_retransmit + "  retransmit");
}

function tryControllerClick() {
    if (document.getElementById("setController").checked && 
            isUnsetName(tx_gapi_controller_name)) {
        formJSONControllerName();
        console.log("set controller");
    }
    else if ( ! isUnsetName(tx_gapi_controller_name)) {
        gapi.hangout.data.clearValue(tx_gapi_controller_name);
        console.log("unset controller");
    }
}

function tryStreamClick() {
	if (control_retransmit) {
		changeHintText(choose_stream);
		
		if (! document.getElementById("setStream").checked) {
			control_stream = false;
			//tx_number = -1;
		}
		else { 
			control_stream = true;
		}
		formJSONError();
	}
	else {
		document.getElementById("setStream").checked = false;
	}
	console.log("stream " + control_stream);
}

function tryRadioClick() {

	if (document.getElementById("messageString").checked) control_msgtype = MSG_STRING;

	if (document.getElementById("messageTwist").checked) control_msgtype = MSG_TWIST;	

	if (document.getElementById("messageStamped").checked) control_msgtype = MSG_RESERVED;	

	//console.log(control_msgtype);
	
	switch (control_msgtype) {
		case MSG_STRING:
		
			changeHintText(choose_output_string);
		break;
		
		case MSG_TWIST:
		
			changeHintText(choose_output_twist);
		break;
		
		case MSG_RESERVED:
		
			changeHintText(choose_output_reserved);
		break;
	}
}

function trySetupROS() {

    ros = new ROSLIB.Ros({
    	url : 'ws://localhost:9090'
  	});
	
	cmdVel = new ROSLIB.Topic({
    	'ros' : ros,
    	'name' : '/talker',
   		 messageType : 'std_msgs/String'
  	});
			
	cmdVel2 = new ROSLIB.Topic({
    	'ros' : ros,
    	'name' : '/mobile_base/commands/velocity',
   		 messageType : 'geometry_msgs/Twist'
  	});

    cmdVel3 = new ROSLIB.Topic({
    	'ros' : ros,
    	'name' : '/'+ basename +'/command_velocity',
   		 messageType : 'geometry_msgs/TwistStamped'
  	});

    kinect_listener = new ROSLIB.Topic({
    	'ros' : ros,
    	'name' : '/'+ basename +'/kinect_feedback',
   		 messageType : 'std_msgs/UInt8'
   		 
  	});
    
    setKinectListener();
    setMapServices();
}

function trySetupControls() {
    document.getElementById("setupControls").style.display="block";
    document.getElementById("setupText").style.display="none";
    document.getElementById("setupMap").style.display="none";
    document.getElementById("alertText").style.display="block";
    
    document.getElementById("tabControls").src= tab_controls_src_selected;
    document.getElementById("tabText").src= tab_text_src_unselected;
    document.getElementById("tabMap").src= tab_map_src_unselected;
}

function trySetupText() {
    document.getElementById("setupControls").style.display="none";
    document.getElementById("setupText").style.display="block";
    document.getElementById("setupMap").style.display="none";
    document.getElementById("alertText").style.display="none";
    
    document.getElementById("tabControls").src= tab_controls_src_unselected;
    document.getElementById("tabText").src= tab_text_src_selected;
    document.getElementById("tabMap").src= tab_map_src_unselected;
}

function trySetupMap() {
    document.getElementById("setupControls").style.display="none";
    document.getElementById("setupText").style.display="none";
    document.getElementById("setupMap").style.display="block";
    document.getElementById("alertText").style.display="none";
    
    document.getElementById("tabControls").src= tab_controls_src_unselected;
    document.getElementById("tabText").src= tab_text_src_unselected;
    document.getElementById("tabMap").src= tab_map_src_selected;
}

function tryHidePadControls() {
    if (test_config) return;
    document.getElementById("padTable").style.display="none";
    //document.getElementById("turtlebotTable").style.display="block";
    document.getElementById("alertText").style.display="none";
}

function tryShowPadControls() {
    if (test_config) return;
    document.getElementById("padTable").style.display="block";
    //document.getElementById("turtlebotTable").style.display="block";
    document.getElementById("alertText").style.display="block";
}

function tryHidePadSelectControls() {
    if (test_config) return;
    document.getElementById("controllerText").style.display="none";
    
}

function tryShowPadSelectControls() {
    //if (test_config) return;
    document.getElementById("controllerText").style.display="block";
    
}

function tryHideMotorControls() {
    if (test_config) return;
    document.getElementById("turtlebotTable").style.display="none";
    document.getElementById("alertText").style.display="block";
}

function tryShowMotorControls() {
    if (test_config) return;
    document.getElementById("turtlebotTable").style.display="block";
    document.getElementById("alertText").style.display="block";
}

function changeHintText(text) {
	document.getElementById('setupText').innerHTML= "<br>" + text;
}

function changeAlertText() {
	var text;
	var connected;
	var stopped;
	var obstructed;
	
	if (control_connected_rx ) {
	    connected = "<b style='color:yellow;font-size:10pt'>" + "[connected]";
	    if (!control_retransmit) tryHideMotorControls();
	}
	else {
	    connected = "<b style='color:green;font-size:10pt'>" + "[free]";
	    tryShowMotorControls();
	}
	
	if (control_stopped_rx) { 
	    stopped = "<b style='color:red;font-size:10pt'>" + "[stopped]";
	    changeButtonSrc(button_center_src_error);
	}
	else {
	    stopped = "<b style='color:green;font-size:10pt'>" + "[running]";
	    changeButtonSrc(button_center_src_start);
	}
	if (control_stream_rx) {
	    stopped = "<b style='color:green;font-size:10pt'>" + "[stream]";
	}
	if (control_obstructed && control_msgtype_rx == MSG_RESERVED ) {
	    obstructed = "<b style='color:red;font-size:10pt'>" + control_obstructed_string ;//"[blocked]";
	}
	else obstructed = "<b style='color:green;font-size:10pt'>" + "[clear]";
	
	if (control_msgtype_rx == MSG_STRING) {
	    obstructed = "<b style='color:green;font-size:10pt'>" + "[string]";
	}
	else if (control_msgtype_rx == MSG_TWIST) {
	    obstructed = "<b style='color:green;font-size:10pt'>" + "[twist]";
	}
	text =  connected + "</b> "  + stopped + "</b> " + obstructed + "</b> " ;
	document.getElementById('alertText').innerHTML= text;
}

function changeButtonPic(button_html) {
	document.getElementById('middleButtonHtml').innerHTML = button_html;
}

function changeButtonSrc(url) {
	document.getElementById('middleButtonSrc').src = url;
}

function formJSONClick(operation) {
	tx_operation = operation; 
	tx_number ++;
	tx_number = tx_number % mod_base;
	console.log(operation);
	makeText = JSON.stringify(makeJSONCommand(operation,  tx_number) ) ;
	console.log( makeText );
	try {	
		gapi.hangout.data.setValue( tx_gapi_key, makeText);
	}
	catch (e) {
		console.log("hangout setValue error. -- Click");
	}
}

function formJSONError() {
	if (!control_retransmit ) return;
	var connect = control_connected_motors;
	var stopped = control_stopped;
	var kinect = 0;//control_obstructed;
	var stream = false;
	
    if (control_obstructed_num > 0) {
        kinect = control_obstructed_num;
    }
    if (control_retransmit && control_stream) {
        stream = true;
    }
    
	makeText = JSON.stringify(makeJSONError(connect, stopped, kinect, stream));
	try {
		gapi.hangout.data.setValue( tx_gapi_error, makeText);
	}
	catch (e) {
		console.log("hangout setValue error. -- Error");
	}
}

function formJSONControllerName() {
    makeText = JSON.stringify(makeJSONName());
	try {
		gapi.hangout.data.setValue( tx_gapi_controller_name, makeText);
	}
	catch (e) {
		console.log("hangout setValue error. -- Error");
	}
	console.log("pad " + makeText);
}

function formJSONTurtlebotName() {
    makeText = JSON.stringify(makeJSONName());
	try {
		gapi.hangout.data.setValue( tx_gapi_turtlebot_name, makeText);
	}
	catch (e) {
		console.log("hangout setValue error. -- Error");
	}
	console.log("machine " + makeText);
}

function makeJSONCommand(operation, num ) {
	var myJSON = { "direction" : operation , "number" : num }; 
	return myJSON;
}

function makeJSONError(connected, stopped, kinect, stream) {
	var myJSON = { "connected" : connected , // identify the robot node
	    "stopped" : stopped ,  // is sequence number wrong (see stream)
	    "kinect" : kinect ,  // output from the kinect on the robot (see msg type info)
	    "stream" : stream , // is stream set on robot
	    "msgtype" : control_msgtype  }; // included for status message on robot only
	return myJSON;
}

function makeJSONName() {
    var myData = gapi.hangout.getLocalParticipantId();
    console.log(myData)
    var myJSON = {"data" : myData};
    return myJSON;
}

function isMatchingName(tx_gapi_data) {
    try {
		rx_data = gapi.hangout.data.getState()[tx_gapi_data];
	}
	catch (e) {
		console.log("error google hangouts api -- " + tx_gapi_data);
	}
	try {
		rx_id = gapi.hangout.getLocalParticipantId();
	}
	catch (e) {
		console.log("error google hangouts api -- " + tx_gapi_data);
	}
	if (typeof rx_data !== 'undefined' && typeof rx_id !== 'undefined') {
	    console.log(rx_error + " error msg");
	    var rx_data_parsed = JSON.parse(rx_data);
	    if (rx_id === rx_data_parsed.data) return true;
	    else return false;
	}
	return false;
}

function isUnsetName(tx_gapi_data) {
    try {
		rx_data = gapi.hangout.data.getState()[tx_gapi_data];
	}
	catch (e) {
		console.log("error google hangouts api -- " + tx_gapi_data);
	}
	if (typeof rx_data === 'undefined') {

	    console.log("unset name test - true");
	    return true;
	}
	else {
	    console.log("unset name test - false");
	    return false;
	}
}

function recieveEvent () {
	
	// error data from hangouts...
	try {
		rx_error = gapi.hangout.data.getState()[tx_gapi_error];
		console.log(rx_error + " error msg");
	}
	catch (e) {
		console.log("error google hangouts api -- " + tx_gapi_error);
	}
	if (typeof rx_error !== 'undefined'){// && rx_error != rx_error_old || true) {
		rx_error_obj = JSON.parse(rx_error);
		if (rx_error_obj.connected == true) control_connected_rx = true;
		else control_connected_rx = false;
		if (rx_error_obj.stopped == true) {
		    control_stopped_rx = true;
		    control_stopped = true;
		}
		else {
		    control_stopped_rx = false;
		    control_stopped = false;
		}
		if (rx_error_obj.kinect > 0) control_obstructed = true;
		else control_obstructed = false;
		if (rx_error_obj.stream) {
		    control_stream_rx = true;
		}
		if (rx_error_obj.msgtype != 0) {
		    control_msgtype_rx = rx_error_obj.msgtype;
		}
		rx_error_old = rx_error;
	}
	changeAlertText();

	// direction data from hangouts...
	try {
	    rx_data = gapi.hangout.data.getState()[tx_gapi_key];
	    
	}
	catch (e){
	    console.log("error google hangouts api -- " );
	}
	console.log(rx_data + " key msg");
	
	stream_num ++;
	stream_num = (stream_num ) % mod_base;
	
	if (typeof rx_data !== 'undefined' && ( rx_data != rx_data_old || rx_obj.direction == "stop")) { 
	
		rx_obj = JSON.parse(rx_data) ;	

		// change sequence numbers...
		
		if (rx_obj.direction == "stop" || rx_obj.number == 0 ) {
		    stream_num = 0;
		    control_stopped = false;
		    control_stopped_rx = false;
		}
        console.log("stream = " + stream_num);
		console.log( rx_obj.direction + " -- " + rx_obj.number);
		
		// handle stream setting here...
		if (!control_stream && control_retransmit && 
		        rx_obj.number != stream_num && rx_obj.number != 0) {
			control_stopped = true;
			changeButtonSrc(button_center_src_error);
			formJSONError(); // OK??
			console.log("exit -- bad seq num");
			rx_data_old = rx_data;
			return;
		}
		rx_data_old = rx_data;
		formJSONError();
		if(control_retransmit == true) retransmitEvent(rx_obj);
	}
	// -- set debug var test_config --
	var users;
	try {
	    users = gapi.hangout.getParticipants();
	}
	catch (e) {
	    console.log("bad users list");
	}
	if (users.length <= 1) test_config = true;
	else test_config = false;
	// -- check if names are set, re-arrange screen --
	if (! isUnsetName(tx_gapi_controller_name)) {
	    if (isMatchingName(tx_gapi_controller_name)) {
	        tryShowPadControls();
	    }
	    else {
	        tryHidePadControls();
	        tryHidePadSelectControls();
	    }
	}
	else {
	    // -- controller has not been selected yet --
	    tryShowPadControls();
	    tryShowPadSelectControls();
	}
	if (! isUnsetName(tx_gapi_turtlebot_name)) {
	    if (isMatchingName(tx_gapi_turtlebot_name)) {
	        tryShowMotorControls();
	        tryHidePadControls();
	        tryHidePadSelectControls();
	    }
	    else {
	        tryHideMotorControls();
	        if (isUnsetName(tx_gapi_controller_name)) {
	            tryShowPadControls();
	            tryShowPadSelectControls();
	        }
	    }
	}
	else {
	    if (true) {
	        tryShowMotorControls();
	        tryShowPadControls();
	        tryHidePadSelectControls();
	    }
	   
	}
	if (test_config && ! isUnsetName(tx_gapi_turtlebot_name)) {
	    tryShowMotorControls();
	    tryShowPadControls();
	    tryShowPadSelectControls();
	    console.log("test config setting");
	}
	
	
	receiveMapEvent();
	receiveMapBroadcast();
	receiveRawMapBroadcast();
}

function retransmitEvent(data) {
	console.log(data.direction + " -- retransmit");
	var numLinear = 0;
	var numAngular = 0;
	
	switch(data.direction) {
		case "left":
			numAngular = 1;
			
		break;
		
		case "right":
			numAngular = -1;
		break;
		
		case "up":
			if (last_key === "up" && last_counter < speed_max ) {
				last_counter ++ ;
				setSpeedTimer();
			} 
			else if (timer_key == 0) last_counter = 1;
			numLinear = 0.20; // 
		break;
		
		case "down":
			if (last_key === "down" && last_counter < speed_max ) {
				last_counter ++ ;
				setSpeedTimer();
			}
			else if (timer_key == 0) last_counter = 1;
			numLinear = -0.20; // 
		break;
		
		case "stop":
			numAngular = 0;
			numLinear = 0;
		break;
	}
	
	last_key = data.direction;
	///////////////////////
	
	switch (control_msgtype) {
		case MSG_STRING:
			
  			var string = new ROSLIB.Message({ data: "hello " + data.direction });
			
			cmdVel.publish(string);
			
			console.log("no error? -- string");
			
		break;
		
		case MSG_TWIST:

			/* 
			turtlebot_bringup (?)
			roslaunch turtlebot_bringup minimal.launch
			always launch software first then connect turtlebot!!
			*/
  			
  			var twist = new ROSLIB.Message({
    			linear : {
      			x : numLinear * last_counter,
      			y : 0.0,
      			z : 0.0
    			},
    			angular : {
     			x : 0.0,
      			y : 0.0,
      			z : numAngular
    			}
  			});
  				

			cmdVel2.publish(twist);

			console.log("no error? -- twist");

		break;
		
		case MSG_RESERVED:
			
  			var velocity = new ROSLIB.Message({
    			header : {
    			    seq : 0, //
    			    stamp : 0,
    			    frame_id : "0"
    			},
    			twist : {
    			    linear : {
      			    x : numLinear * last_counter,
      			    y : 0.0,
      			    z : 0.0
    			    },
    			    angular : {
     			    x : 0.0,
      			    y : 0.0,
      			    z : numAngular
    			    }
  			    }
    			
  			});
  				

			cmdVel3.publish(velocity);

			console.log("no error? -- velocity");
		break;
	}
	
}

function setSpeedTimer() {
	if (timer_key != 0) {
		clearTimeout(timer_key);
	}
	else {
		last_counter = 1;
	}
	timer_key = setTimeout(doSpeedTimer, 700);
}

function doSpeedTimer() {
	last_counter = 1;
	timer_key = 0;
}

function setKinectListener() {
    //console.log("kinect setup");
  	
  	try {
  	    kinect_listener.subscribe( function(message) {
            //console.log(  kinect_listener.name + " : " + message.data );
            var data = message.data;
            control_obstructed_num = message.data;
            control_obstructed_string = "[";
            if (data > 7) {
                control_obstructed_string = "[xxx]";
                data = 0;
            }
            // read message
            if (data >= 4) {
                control_obstructed_string += "x";
                data -= 4;
            }
            else { control_obstructed_string += "-";}
            if (data >= 2) {
                control_obstructed_string += "x";
                data -= 2;
            }
            else { control_obstructed_string += "-";}
            if (data >= 1) {
                control_obstructed_string += "x";
                data -= 1;
            }
            else { control_obstructed_string += "-";}
            
            control_obstructed_string += "]";
        } );
    }
    catch (e) {
        console.log ("no message " + e.message);
    }


}


    

// A function to be run at app initialization time which registers our callbacks
function init() {
	console.log('Init app.');

	var apiReady = function(eventObj) {
		if (eventObj.isApiReady) {
			console.log('API is ready v1.7 --------------------------------');
	
			gapi.hangout.data.onStateChanged.add(function(eventObj) {
				recieveEvent();
			});
	        
			//console.log("websocket test");
			if ('WebSocket' in window){
    				// WebSocket is supported.
			
			} else {
    				// WebSockets are not supported.
				alert("no web sockets.");
			}
            /*
            ros = new ROSLIB.Ros({
    			url : 'ws://localhost:9090'
  			});
  			*/
            //setKinectListener();
            
            //gapi.hangout.data.clearValue(tx_gapi_turtlebot_name);
            //gapi.hangout.data.clearValue(tx_gapi_controller_name);
	
      			gapi.hangout.onApiReady.remove(apiReady);
    		}
	};

	// Use this special api ready state event
	gapi.hangout.onApiReady.add(apiReady);
}

gadgets.util.registerOnLoadHandler(init);

// app-map.js
var test_map = "";

var tx_gapi_map_event = "telenp_map";
var tx_gapi_map_raw = "telenp_map_raw";
var map_service_list ;
var map_service_load ;
var map_service_new ;
var map_service_delete ;
var map_service_rename ;
var map_service_save ;
// listen to map topic.
var map_listener ;

// commands for operations
var map_command_load = "load";
var map_command_make = "new";
var map_command_delete = "delete";
var map_command_rename = "rename";
var map_command_save = "save";
var map_command_list = "list";
// more commands for lists that are needed in above ops.
var map_command_list_load = "embedded_list_for_load";
var map_command_list_delete = "embedded_list_for_delete";
var map_command_list_rename = "embedded_list_for_rename";
var map_command_list_start = "embedded_list_for_show_map";


function opChooseOp() {
    document.getElementById("wizOpLoad").style.display = "none";
    document.getElementById("wizOpNew").style.display = "none";
    document.getElementById("wizOpDel").style.display = "none";
    document.getElementById("wizOpRename").style.display = "none";
    document.getElementById("wizOpSave").style.display = "none";
    document.getElementById("wizOpDone").style.display = "none";
    document.getElementById("wizOpStart").style.display = "none";
    document.getElementById("wizChooseOp").style.display = "block";
    
    sendMapCommandsShort(map_command_list, 0, "", "", map_command_list);
}

function opLoad() {
    document.getElementById("wizOpLoad").style.display = "block";
    document.getElementById("wizOpNew").style.display = "none";
    document.getElementById("wizOpDel").style.display = "none";
    document.getElementById("wizOpRename").style.display = "none";
    document.getElementById("wizOpSave").style.display = "none";
    document.getElementById("wizOpDone").style.display = "none";
    document.getElementById("wizOpStart").style.display = "none";
    document.getElementById("wizChooseOp").style.display = "none";
    
    document.getElementById("wizOpLoadConfirm").style.display = "none";
    
    sendMapCommandsShort(map_command_list, 0, "", "", map_command_list_load);
}

function opMake() {
    document.getElementById("wizOpLoad").style.display = "none";
    document.getElementById("wizOpNew").style.display = "block";
    document.getElementById("wizOpDel").style.display = "none";
    document.getElementById("wizOpRename").style.display = "none";
    document.getElementById("wizOpSave").style.display = "none";
    document.getElementById("wizOpDone").style.display = "none";
    document.getElementById("wizOpStart").style.display = "none";
    document.getElementById("wizChooseOp").style.display = "none";
    
    document.getElementById("wizOpNewConfirm").style.display = "none";
}

function opDelete() {
    document.getElementById("wizOpLoad").style.display = "none";
    document.getElementById("wizOpNew").style.display = "none";
    document.getElementById("wizOpDel").style.display = "block";
    document.getElementById("wizOpRename").style.display = "none";
    document.getElementById("wizOpSave").style.display = "none";
    document.getElementById("wizOpDone").style.display = "none";
    document.getElementById("wizOpStart").style.display = "none";
    document.getElementById("wizChooseOp").style.display = "none";
    
    document.getElementById("wizOpDelConfirm").style.display = "none";
    
    sendMapCommandsShort(map_command_list, 0, "", "", map_command_list_delete);
}

function opRename() {
    document.getElementById("wizOpLoad").style.display = "none";
    document.getElementById("wizOpNew").style.display = "none";
    document.getElementById("wizOpDel").style.display = "none";
    document.getElementById("wizOpRename").style.display = "block";
    document.getElementById("wizOpSave").style.display = "none";
    document.getElementById("wizOpDone").style.display = "none";
    document.getElementById("wizOpStart").style.display = "none";
    document.getElementById("wizChooseOp").style.display = "none";
    
    document.getElementById("wizOpRenameConfirm").style.display = "none";
    document.getElementById("inputSpaceRename").value = "";

    sendMapCommandsShort(map_command_list, 0, "", "", map_command_list_rename);
}

function opSave() {
    document.getElementById("wizOpLoad").style.display = "none";
    document.getElementById("wizOpNew").style.display = "none";
    document.getElementById("wizOpDel").style.display = "none";
    document.getElementById("wizOpRename").style.display = "none";
    document.getElementById("wizOpSave").style.display = "block";
    document.getElementById("wizOpDone").style.display = "none";
    document.getElementById("wizOpStart").style.display = "none";
    document.getElementById("wizChooseOp").style.display = "none";
    
    document.getElementById("wizOpSaveConfirm").style.display = "none";
    document.getElementById("inputSpaceSave").value = "";
    
    document.getElementById("wizOpSaveConfirm").style.display = "none";
}

function opStart() {
    document.getElementById("wizOpLoad").style.display = "none";
    document.getElementById("wizOpNew").style.display = "none";
    document.getElementById("wizOpDel").style.display = "none";
    document.getElementById("wizOpRename").style.display = "none";
    document.getElementById("wizOpSave").style.display = "none";
    document.getElementById("wizOpDone").style.display = "none";
    document.getElementById("wizOpStart").style.display = "block";
    document.getElementById("wizChooseOp").style.display = "none";
    
    document.getElementById('wizOpStartConfirm').style.display = "none";
}

function opCancel() {
    opChooseOp();
}

function receiveMapEvent() {
    console.log("map");
    if (! isMatchingName(tx_gapi_turtlebot_name)) return;
    var rx_map_commands ;
    try {
	    rx_map_commands = gapi.hangout.data.getState()[tx_gapi_map_event];
	    
	}
	catch (e){
	    console.log("error google hangouts api -- map" );
	}
	if (typeof rx_map_commands !== "undefined") {
	    var commands = JSON.parse(rx_map_commands);
	    //do something... round-trip the 'wizard' operand
	    switch( commands.command ) {
	        case map_command_list : 
	            var request = new ROSLIB.ServiceRequest({});
	            map_service_list.callService( request, function (result) {
	                
	                sendMapBroadcast(commands.wizard, result.map_list, 0);
	            });
	        break;
	        
	        case map_command_load : 
	            var request = new ROSLIB.ServiceRequest({ "map_id": commands.id});
	            map_service_load.callService( request, function (result) {
	                sendMapBroadcast(commands.wizard, null, 0);
	            } );
	        break;
	        
	        case map_command_list_start :
	            var list;
                try {
                    map_listener.subscribe( function(message) {
                        list = message.data;
                        
                        sendMapPicBroadcast(message);
                        map_listener.unsubscribe();
                    });
                }
                catch (e) {
                    console.log("map listener fail");
                }
                
	        break;
	        
	        case map_command_delete :
                var request = new ROSLIB.ServiceRequest({ "map_id": commands.id});
	            map_service_delete.callService( request, function (result) {
	                sendMapBroadcast(commands.wizard, null, 0);
	            } );
	        
	        
	        break;
	        
	        case map_command_rename :
                var request = new ROSLIB.ServiceRequest({ "map_id": commands.id, 
                    "new_name": commands.rename});
	            map_service_rename.callService( request, function (result) {
	                sendMapBroadcast(commands.wizard, null, 0);
	            } );
	        
	        
	        break;
	        
	        case map_command_save :
                var request = new ROSLIB.ServiceRequest({ "map_name": commands.name});
	            map_service_save.callService( request, function (result) {
	                sendMapBroadcast(commands.wizard, null, 0);
	            } );
	        
	        
	        break;
	    }
	}
    gapi.hangout.data.clearValue(tx_gapi_map_event);
    
}

function sendMapCommandsShort( command, id, name1, name2, wizard) {
    sendMapCommands(command, id, name1, name2, wizard, 0,0,0, 0,0,0);
}

function sendMapCommands( command, id,  name1, name2, wizard , 
        xx1, yy1, angle1, xx2, yy2, angle2) {
    if (! isMatchingName(tx_gapi_turtlebot_name) && 
            ! isMatchingName(tx_gapi_controller_name) ) return;
    var send = {
                    'command' : command,
                    'id' : id,
                    'name' : name1,
                    'rename' : name2,
                    'wizard' : wizard,
                    //extra ops
                    "x1" : xx1,
                    "y1" : yy1,
                    "angle1" : angle1,
                    "x2" : xx2,
                    "y2" : yy2,
                    "angle2" : angle2 };
                    
                    
    var makeText = JSON.stringify (send);
    
    try {
		gapi.hangout.data.setValue( tx_gapi_map_event, makeText);
	}
	catch (e) {
		console.log("hangout setValue error. -- Error");
	}
	console.log("map event " + makeText);
}

function setMapServices() {
    map_service_list = new ROSLIB.Service({
    	'ros' : ros,
    	'name' : '/list_maps',
   		 messageType : 'map_store/ListMaps'
  	});
  	
  	map_service_load = new ROSLIB.Service({
    	'ros' : ros,
    	'name' : '/publish_map',
   		 messageType : 'map_store/PublishMap'
  	});
  	
  	//no service for new map
  	map_service_new = new ROSLIB.Service({
    	'ros' : ros,
    	'name' : '/create_map',
   		 messageType : 'map_store/'
  	});
  	
  	map_service_delete = new ROSLIB.Service({
    	'ros' : ros,
    	'name' : '/delete_map',
   		 messageType : 'map_store/DeleteMap'
  	});
  	
  	map_service_rename = new ROSLIB.Service({
    	'ros' : ros,
    	'name' : '/rename_map',
   		 messageType : 'map_store/RenameMap'
  	});
  	
  	map_service_save = new ROSLIB.Service({
    	'ros' : ros,
    	'name' : '/save_map',
   		 messageType : 'map_store/SaveMap'
  	});
  	
  	map_listener = new ROSLIB.Topic({
    	'ros' : ros,
    	'name' : '/map',
   		 messageType : 'nav_msgs/OccupancyGrid'
   		 
  	});
}

function putListInSelectLocal(list, space) {
    var string = "";
    var x;
    for(x =0; x < list.length; x ++ ) { 
        string = string + '<option value="' + list[x].map_id;
        var num = x + 1;
        string = string + '">' + num + '. ' + list[x].name  ;
        if (list[x].name == "") string = string + "[unnamed]";
        string = string + "</option>";
        
    }
    console.log(string);
    document.getElementById(space).innerHTML = string;
}

function putListInBoxLocal(list, space) {
    var string = "";
    var x;
    for(x =0; x < list.length; x ++ ) { 
        var num = x + 1;
        string = string + num + ". " ;
        string = string + list[x].name;
        if (list[x].name == "") string = string + "[unnamed]";
        string = string + "<br>";
        console.log("list -" + list[x].name + "- " + list[x].map_id);
    }

    document.getElementById(space).innerHTML = string;
}

function sendMapBroadcast(type, list, num) {
    if (! isMatchingName(tx_gapi_turtlebot_name)  ) return;
    var x;
    var map_list = "";
    if (list == null || typeof list === "undefined") {
        map_list = JSON.stringify ({ 
                            'name' : '' ,
                            'session_id' : '' ,
                            'date' : '' , 
                            'map_id' : ''
        });
    }
    else if (list != null) {
        for (x = 0; x < list.length; x ++) {
            var element = { 'name' : list[x].name ,
                            'session_id' : list[x].session_id ,
                            'date' : list[x].date , 
                            'map_id' : list[x].map_id };
            if (x != 0) map_list = map_list + ","; 
            map_list = map_list +  JSON.stringify(element);
        }
    }
    if (num == 0 && list != null && typeof list !== "undefined") num = list.length;
    
    map_list = "[" + map_list + "]";
    var listText = '{"type":"'+type+'","map_list":'+ map_list + ', "num":'+num + '}';
    console.log (listText);
    try {
		gapi.hangout.data.setValue( tx_gapi_list, listText);
	}
	catch (e) {
		console.log("hangout setValue error. -- Error");
	}
	console.log("map event " + listText);
}

function sendMapPicBroadcast(map_in) {
    if (! isMatchingName(tx_gapi_turtlebot_name)  ) return;
    if (typeof map_in === "undefined") {
        console.log("map_in is undefined...-----------------------");
        return;
    }
    var x,y;
    var width = map_in.info.width;
    var height = map_in.info.height;
    var map = '{"width":"' + width + '","height":"' + height + '","map": [';
    for (y = 0; y < height; y ++) {
        for (x = 0; x < width; x ++) {
            var element = { "d" : map_in.data[(y * width) + x] };

            map = map + JSON.stringify(element);
            if  (x == width - 1 && y == height - 1) {
                //don't add comma
            }
            else map = map + ',' ;
        }
    }
    map = map + ']}';
    try {
		gapi.hangout.data.setValue( tx_gapi_map_raw, map);
	}
	catch (e) {
		console.log("hangout setValue error. -- Error with map pic");
	}
	console.log(map);
}

function receiveMapBroadcast() {
    if (! isMatchingName(tx_gapi_controller_name)  ) return;
    try {
	    rx_data = gapi.hangout.data.getState()[tx_gapi_list];
	    
	}
	catch (e){
	    console.log("error google hangouts api -- " );
	}
	console.log(rx_data + " list msg");
	
	if (typeof rx_data !== "undefined") {
	    // do something...
	    data = JSON.parse(rx_data);
	    switch(data.type) {
	        case map_command_list :
	            putListInBoxLocal(data.map_list, "listSpace");
	        break;
	        
	        case map_command_load :
	            document.getElementById("wizOpLoadConfirm").style.display = "block";
	            //opChooseOp();
	        break;
	        
	        case map_command_delete :
	            document.getElementById("wizOpDelConfirm").style.display = "block";
	        break;
	        
	        case map_command_list_load :
	            putListInSelectLocal(data.map_list, "selectSpaceLoad");
	        break;
	        
	        case map_command_list_start:
	        
	        break;
	        
	        case map_command_list_delete :
	            putListInSelectLocal(data.map_list, "selectSpaceDelete");
	        break;
	        
	        case map_command_list_rename :
	            putListInSelectLocal(data.map_list, "selectSpaceRename");
	        break;
	        
	        case map_command_rename :
	            document.getElementById("wizOpRenameConfirm").style.display = "block";
	        break;
            
            case map_command_save :
	            document.getElementById("wizOpSaveConfirm").style.display = "block";
	        break;
	    }
	}
	try {
	    gapi.hangout.data.clearValue(tx_gapi_list);
	    
	}
	catch (e){
	    console.log("error google hangouts api -- " );
	}
}

function receiveRawMapBroadcast() {
    if (! isMatchingName(tx_gapi_controller_name) && 
        ! isMatchingName(tx_gapi_turtlebot_name) ) return;
    try {
	    rx_data = gapi.hangout.data.getState()[tx_gapi_map_raw];
	    
	}
	catch (e){
	    console.log("error google hangouts api -- " );
	}
	
	//console.log("raw map broadcast!! ---------------------");
	if (typeof rx_data !== "undefined") {
	    var list = JSON.parse(rx_data);
	    //console.log("data received " + list);
	    fillMapSpace('showMapSpace', list);
	}
}

function executeLoad() {
    var map_id = document.getElementById("selectSpaceLoad").value;
    sendMapCommandsShort(map_command_load, map_id, "", "", map_command_load);
}

function executeDelete() {
    var map_id = document.getElementById("selectSpaceDelete").value;
    sendMapCommandsShort(map_command_delete, map_id, "", "", map_command_delete);
}

function executeRename() {
    var map_id = document.getElementById("selectSpaceRename").value;
    var new_name = document.getElementById("inputSpaceRename").value;
    //check for bad 'new_name' string (no quotes, etc.)
    sendMapCommandsShort(map_command_rename, map_id, "",new_name, map_command_rename);
}

function executeSave() {
    var new_name = document.getElementById("inputSpaceSave").value;
    //check for bad 'new_name' string (no quotes, etc.)
    sendMapCommandsShort(map_command_save, 0, new_name, "", map_command_save);
}

function fillMapSpace(space, list) {
    
    var string = '<div border="0" id="mapSpaceTable"' ;
    string = string + ' style="display:block; min-height:3px;min-width:3px">';
    var x, y;
    var height = list.height;
    var width = list.width;
    for (y = 0; y < height; y ++) {
        string = string + '<div style="display:block">';//
        for(x =0; x < width; x ++ ) { 
            string = string + '<div style="display:inline; min-height:3px; height:8px">';
            if (list.map[(y * height) + x].d > 5) {
                string = string + '<img src="//awesometelenp.appspot.com/static/bitmap/pix_light.png" ' ;
            }
            else {
                string = string + '<img src="//awesometelenp.appspot.com/static/bitmap/pix_dark.png" ' ;
            }
            string = string + 'onclick="xy('+ x + ","+ y +')">';
            string = string + "</div>";
        }
        string = string + "</div>";
    }
    string = string + "</div>";
    console.log(string);
    document.getElementById(space).innerHTML = string;
    document.getElementById("wizOpStartConfirm").style.display = "block";
}

function getMapTopic() {
    if (! isMatchingName(tx_gapi_turtlebot_name) && 
        ! isMatchingName(tx_gapi_controller_name) ) return;
    sendMapCommandsShort(map_command_list_start, 0, "", "", map_command_list_start);
    return;

}

function xy(x,y) {

}
</script>


<body style="background-color: #999">
<div style="padding: 0px 0px 0px 0px; background-color: #000">
	<img src="//awesometelenp.appspot.com/static/bitmap/tab_controls.png" 
	alt="CONTROLS" onclick="trySetupControls()" id="tabControls">
	<img src="//awesometelenp.appspot.com/static/bitmap/tab_setup_unselected.png" 
	alt="SETUP" onclick="trySetupText()" id="tabText">
	<img src="//awesometelenp.appspot.com/static/bitmap/tab_map_unselected.png" 
	alt="MAP" onclick="trySetupMap()" id="tabMap">
</div>
<div style="float: left; padding: 0px 20px; background-color: #999"
	id="setupControls">


	<br>
	<table border="0" id="padTable">
	<tr>
	<td></td>
	<td><img src="//awesometelenp.appspot.com/static/bitmap/button_up.png" 
		onmousedown="tryUpClick()" onmouseup="tryClearTimer()" onmouseout="tryClearTimer()" 
		alt="CLICK"></td>
	<td></td>
	</tr>
	<tr>
	<td><img src="//awesometelenp.appspot.com/static/bitmap/button_left.png" 
		onmousedown="tryLeftClick()" onmouseup="tryClearTimer()" onmouseout="tryClearTimer()" 
		alt="CLICK"></td>
	<td id="middleButtonHtml"><img src="//awesometelenp.appspot.com/static/bitmap/button_center.png"  
		onmousedown="tryStopClick()" alt="CLICK" id="middleButtonSrc"></td>
	<td><img src="//awesometelenp.appspot.com/static/bitmap/button_right.png" 
		onmousedown="tryRightClick()" onmouseup="tryClearTimer()" onmouseout="tryClearTimer()" 
		alt="CLICK"></td>
	</tr>
	<tr>
	<td></td>
	<td><img src="//awesometelenp.appspot.com/static/bitmap/button_down.png"  
		onmousedown="tryDownClick()" onmouseup="tryClearTimer()" onmouseout="tryClearTimer()" 
		alt="CLICK"></td>
	<td></td>
	</tr>
	</table>

  <br>
  
<div style="clear: both; background-color:#aaaaaa" id="alertText">
	<b style="color:green;font-size:10pt">[free] </b>
	<b style="color:green;font-size:10pt">[running] </b>
	<b style="color:green;font-size:10pt">[clear]</b>
</div>  
  
<div style="clear: both; background-color:#aaaaaa; display:none" id="controllerText">
	<input type=checkbox value="Controller" id="setController"
        onClick="tryControllerClick()">Controller Node?</input><br>
</div>
  
  <table border="0" id="turtlebotTable">
  <tr><td>
	<b>Various:</b><br>
  <input type=checkbox value="Turtlebot" id="setTurtlebot"
        onClick="tryTurtlebotClick()">Turtlebot Node?</input><br>
  <input type=checkbox value="Stream" id="setStream"
        onClick="tryStreamClick()">Stream Mode?</input>         
	</td></tr><tr><td>
	<b>Message Type:</b><br>
	<form action="">
	<input type="radio" name="message" id="messageString" 
	value="string" onclick="tryRadioClick()" >String<br>
	
	<input type="radio" name="message" id="messageTwist" 
	value="cmdvel" onclick="tryRadioClick()">Twist<br>
	
	<input type="radio" name="message" id="messageStamped" 
	value="velocity" onclick="tryRadioClick()">TwistStamped
	</form>
	</td></tr>
	</table>
<br>
</div>

<div style="clear: both; background-color:#aaaaaa; display: none;" id="monitorDiv">
	<br>
	TURTLEBOT MONITOR:
</div>

<div style="clear: both; background-color:#aaaaaa; display: none;" id="setupText">
	<br>
	TURTLEBOT SETUP:
</div>
<!-- /body tag is now after 'app-map.html' code -->
<!-- one div for entire tab -->

<style>
table
{
    border-collapse:collapse;
}
table, td, tr
{
    border:0px solid black;
}
img
{
    vertical-align:middle;
}
button
{
    padding:0;
    margin:0;
}
</style>

<div style="clear: both; background-color:#aaaaaa; display: none;" id="setupMap">


<!-- one div for each frame of wizard  CHOOSE-->
<div style="clear: both; background-color:#aaaaaa; display: block;" id="wizChooseOp">
    MAP SETUP:
    <br>
<table border=0 id="wizChooseOpTable" style="">

<tr><td><button type="button" onclick="opLoad()" style="width:100%">Load Map</button></td></tr>
<tr><td><button type="button" onclick="opMake()" style="width:100%">Make Map</button></td></tr>
<tr><td><button type="button" onclick="opDelete()" style="width:100%">Delete Map</button></td></tr>
<tr><td><button type="button" onclick="opRename()" style="width:100%">Rename Map</button></td></tr>
<tr><td><button type="button" onclick="opSave()" style="width:100%">Save Map</button></td></tr>
<tr><td><button type="button" onclick="opStart()" style="width:100%">Start Robot</button></td></tr>
</table>
<br>
<button type="button" onclick="opChooseOp()">List</button>
List of Maps:<br>
    <div id="listSpace" style="border-style:solid;border-width:3px; border-color:black;
        width:300px; height:175px; overflow:auto">
    Click 'LIST' button to see...<br>
    
    </div>
<br>
<button type="button" onclick="opCancel()">Cancel</button>

</div>

<!-- one div for each frame of wizard  LOAD -->
<div style="clear: both; background-color:#aaaaaa; display: none;" id="wizOpLoad">
    Load this file:
    <form action="">
    <select id="selectSpaceLoad">
    <option value="none">None</option>
    </select><button type="button" onclick="executeLoad()">LOAD</button><br>
    </form>
<button type="button" onclick="opCancel()">Close</button>
<p id="wizOpLoadConfirm" style="display:none">Your map loaded.</p>

</div>

<!-- one div for each frame of wizard  NEW -->
<div style="clear: both; background-color:#aaaaaa; display: none;" id="wizOpNew">
new
<button type="button" onclick="opCancel()">Cancel</button>
<p id="wizOpNewConfirm" style="display:none">New map ready.</p>
</div>
<!-- one div for each frame of wizard  DELETE -->
<div style="clear: both; background-color:#aaaaaa; display: none;" id="wizOpDel">
    Delete this file:
    <form action="">
    <select id="selectSpaceDelete">
    <option value="none">None</option>
    </select><button type="button" onclick="executeDelete()">DELETE</button><br>
    </form>
<button type="button" onclick="opCancel()">Close</button>
    <p id="wizOpDelConfirm" style="display:none">Your map was deleted. Refresh or click 'Close' to see new
    list</p>
</div>
<!-- one div for each frame of wizard  RENAME -->
<div style="clear: both; background-color:#aaaaaa; display: none;" id="wizOpRename">
    Rename this file:
    <form action="">
    <select id="selectSpaceRename">
    <option value="none">None</option>
    </select>
    <input type="text" name="rename" id="inputSpaceRename">
    <button type="button" onclick="executeRename()">RENAME</button><br>
    </form>
<button type="button" onclick="opCancel()">Done</button>
    <p id="wizOpRenameConfirm" style="display:none">Your map was renamed. Refresh of click 'Done' to see new
    list</p>
</div>
<!-- one div for each frame of wizard  SAVE -->
<div style="clear: both; background-color:#aaaaaa; display: none;" id="wizOpSave">
    Give your map a name:
    <input type="text" name="rename" id="inputSpaceSave">
    <button type="button" onclick="executeSave()">SAVE</button><br>
<button type="button" onclick="opCancel()">Done</button>
<p id="wizOpSaveConfirm" style="display:none">Your map was saved.</p>
</div>
<!-- one div for each frame of wizard  DONE -->
<div style="clear: both; background-color:#aaaaaa; display: none;" id="wizOpDone">
<button type="button" onclick="">Done</button>
<p id="wizOpDoneConfirm" style="display:none">Your operation is done.</p>
</div>
<!-- one div for each frame of wizard  START ROBOT / CONFIG-->
<div style="clear: both; background-color:#aaaaaa; display: none;" id="wizOpStart">
    <button type="button" onclick='getMapTopic();'>Show</button>
    <div id="showMapSpace" style="border-style:solid;border-width:3px; border-color:black;
        width:300px; height:175px; overflow:auto; font-size:3px; padding:0px 0px 0px 0px;">
    <div style="font-size:12pt;">Click 'SHOW' button to see...</div><br>
    </div>

<button type="button" onclick="opCancel()">Done</button>
<p id="wizOpStartConfirm" style="display:none">Your map is shown.</p>
</div>
<!-- end of wizard -->
</div>
<!-- closing body tag -->
</body>
]]></Content>
</Module>
